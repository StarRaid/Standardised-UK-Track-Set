grf{
	grfid: "SUKT" ;
	name: string(STR_GRF_NAME) ;
	desc: string(STR_GRF_DESC) ;
	version: 18 ;
	min_compatible_version: 0 ;
	param 0{
		toggle_limits{
			type    : bool ;
			name    : string(STR_PARAM_SPEEDLIMITS_NAME) ;
			desc    : string(STR_PARAM_SPEEDLIMITS_DESC) ;
			bit     : 1 ;
			def_value : 0 ;
		}
		wide_ballast{
			type    : bool ;
			name    : string(STR_PARAM_TRACK_WIDE_BALLAST_NAME) ;
			desc    : string(STR_PARAM_TRACK_WIDE_BALLAST_DESC) ;
			bit     : 2 ;
			def_value : 0 ;
		}
	}
	param 1{
		cost_multiplier{
			type    : int ;
			name    : string(STR_PARAM_COSTS_BUILD_NAME) ;
			desc    : string(STR_PARAM_COSTS_MAINT_DESC) ;
			min_value	: 0 ;
			max_value	: 7 ;
			def_value	: 4 ;
			names		: {
				0	: string(STR_PARAM_VVVLOW  ) ;
				1	: string(STR_PARAM_VVLOW) ;
				2	: string(STR_PARAM_VLOW) ;
				3	: string(STR_PARAM_LOW ) ;
				4	: string(STR_PARAM_MEDIUM ) ;
				5	: string(STR_PARAM_HIGH ) ;
				6	: string(STR_PARAM_TOOMUCH ) ;
				7	: string(STR_PARAM_TOOTOOMUCH ) ;
			} ;
		}
	}
	param 2{
		speed_1{
			type    : int ;
			name    : string(STR_PARAM_SPEED_1) ;
			desc    : string(STR_PARAM_SPEED_DESC) ;
			min_value	: 0 ;
			max_value	: 500 ;
			def_value	: 15 ;
		}
	}
	param 3{
		speed_2{
			type    : int ;
			name    : string(STR_PARAM_SPEED_2) ;
			desc    : string(STR_PARAM_SPEED_DESC) ;
			min_value	: 0 ;
			max_value	: 500 ;
			def_value	: 20 ;
		}
	}
	param 4{
		speed_3{
			type    : int ;
			name    : string(STR_PARAM_SPEED_3) ;
			desc    : string(STR_PARAM_SPEED_DESC) ;
			min_value	: 0 ;
			max_value	: 500 ;
			def_value	: 40 ;
		}
	}
	param 5{
		speed_4{
			type    : int ;
			name    : string(STR_PARAM_SPEED_4) ;
			desc    : string(STR_PARAM_SPEED_DESC) ;
			min_value	: 0 ;
			max_value	: 500 ;
			def_value	: 60 ;
		}
	}
	param 6{
		speed_5{
			type    : int ;
			name    : string(STR_PARAM_SPEED_5) ;
			desc    : string(STR_PARAM_SPEED_DESC) ;
			min_value	: 0 ;
			max_value	: 500 ;
			def_value	: 75 ;
		}
	}
	param 7{
		speed_6{
			type    : int ;
			name    : string(STR_PARAM_SPEED_6) ;
			desc    : string(STR_PARAM_SPEED_DESC) ;
			min_value	: 0 ;
			max_value	: 500 ;
			def_value	: 100 ;
		}
	}
	param 8{
		speed_7{
			type    : int ;
			name    : string(STR_PARAM_SPEED_7) ;
			desc    : string(STR_PARAM_SPEED_DESC) ;
			min_value	: 0 ;
			max_value	: 500 ;
			def_value	: 100 ;
		}
	}
	param 9{
		speed_8{
			type    : int ;
			name    : string(STR_PARAM_SPEED_8) ;
			desc    : string(STR_PARAM_SPEED_DESC) ;
			min_value	: 0 ;
			max_value	: 500 ;
			def_value	: 125 ;
		}
	}
	param 10{
		speed_9{
			type    : int ;
			name    : string(STR_PARAM_SPEED_9) ;
			desc    : string(STR_PARAM_SPEED_DESC) ;
			min_value	: 0 ;
			max_value	: 500 ;
			def_value	: 187 ;
		}
	}
	param 11{
		extra_tracks{
			type    : int ;
			name    : string(STR_PARAM_TRACK_LIST_NAME) ;
			desc    : string(STR_PARAM_TRACK_LIST_DESC) ;
			min_value	: 0 ;
			max_value	: 3 ;
			def_value	: 0 ;
			names		: {
				0	: string(STR_PARAM_TRACK_ONE ) ;
				1	: string(STR_PARAM_TRACK_MIN ) ;
				2	: string(STR_PARAM_TRACK_STANDARD ) ;
				3	: string(STR_PARAM_TRACK_EXTRA ) ;
			} ;
		}
	}
	param 12{
		signal_elec {
 			type:    int;
 			name:    string(STR_PARAM_SIGNAL_ELEC_NAME);
 			desc:    string(STR_PARAM_SIGNAL_ELEC_DESC);
 			min_value: 0;
 			max_value: 2;
 			def_value: 0;
 			names: {
 				0: string(STR_PARAM_SIGNAL_ELEC_2ASP);
 				1: string(STR_PARAM_SIGNAL_ELEC_3ASP);
 				2: string(STR_PARAM_SIGNAL_ELEC_4ASP);
 			};
		}
	}
	param 13{
		fence_number {
 			type:    int;
 			name:    string(STR_PARAM_GFX_FENCE_NAME);
 			desc:    string(STR_PARAM_GFX_FENCE_DESC);
 			min_value: 0;
 			max_value: 3;
 			def_value: 0;
 			names: {
 				0: string(STR_PARAM_GFX_FENCE_ALL);
 				1: string(STR_PARAM_GFX_FENCE_MOST);
 				2: string(STR_PARAM_GFX_FENCE_SOME);
 				3: string(STR_PARAM_GFX_FENCE_NONE);
 			};
		}
	}
	param 14{
		depot_type {
 			type:    int;
 			name:    string(STR_PARAM_GFX_DEPOT_NAME);
 			desc:    string(STR_PARAM_GFX_DEPOT_DESC);
 			min_value: 0;
 			max_value: 2;
 			def_value: 1;
 			names: {
 				0: string(STR_PARAM_GFX_DEPOT_ALL);
 				1: string(STR_PARAM_GFX_DEPOT_ONE);
 				2: string(STR_PARAM_GFX_DEPOT_DEFAULT);
 			};
		}
	}
	param 15{
		decor_tracks{
			type    : bool ;
			name    : string(STR_PARAM_DECOR_NAME) ;
			desc    : string(STR_PARAM_DECOR_DESC) ;
			bit     : 1 ;
			def_value : 0 ;
		}
	}
}

railtypetable {
    STANDARD_GAUGE_RAILTYPE_ALL, NARROW_GAUGE_RAILTYPE_ALL,
	THIRD_RAIL: [SAA3, "3RDR", ELRL],
	DUAL_VOLT: [SAAZ, "3RDC", ELRL],
	FOURTH_RAIL: [SAA4, "4RDR", SAA3, "3RDR", ELRL]
}

cargotable {
//Default cargos
   PASS, MAIL, COAL, FOOD, GOLD, GOOD, GRAI, IORE, LVST, OIL_, PAPR, STEL, VALU, WHEA, WOOD,

//Tropical cargos
   CORE, DIAM, FRUT, MAIZ, RUBR, WATR, 

//ECS
   AORE, BDMT, BRCK, CERA, CERE, CMNT, DYES, FERT, FICR, FISH, GLAS, LIME, OLSD, PETR, PLAS, POTA, RFPR, SAND, SULP, TOUR, VEHI, WDPR, WOOL, 
   
//FIRS
   BEAN, BEER, BOOM, CLAY, CASS, COKE, ENSP, EOIL, FMSP, FRVG, GRVL, IRON, METL, MNO2, MILK, MNSP, NICK, NITR, NUTS, PHOS, PIPE, PORE, QLME, RCYC, SASH, SCMT, SGBT, SGCN, SLAG, VBOD, VPTS, JAVA, COPR, SUGR, ZINC,
   
   SCRP, //Old scrap metal
   
//Nuclear stuff
	URAN, NWST
}



basecost{
	PR_BUILD_RAIL	: (param[1]-3) ;
}

